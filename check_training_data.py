#!/usr/bin/env python3
"""
Script ki·ªÉm tra d·ªØ li·ªáu training t·ª´ database.
Ki·ªÉm tra d·ªØ li·ªáu ƒë∆∞·ª£c th√™m qua GUI v√† Web app.
"""

import os
import sys
import json
from datetime import datetime
from db import (
    get_user_id_to_fullname_mapping,
    get_training_data_summary
)

def print_training_data_summary():
    """In ra t·ªïng quan v·ªÅ d·ªØ li·ªáu training."""
    summary = get_training_data_summary()
    
    print("=" * 60)
    print("T·ªîNG QUAN D·ªÆ LI·ªÜU TRAINING")
    print("=" * 60)
    print(f"T·ªïng s·ªë users: {summary['total_users']}")
    print(f"T·ªïng s·ªë ·∫£nh: {summary['total_images']}")
    print()
    
    print("DANH S√ÅCH USERS V√Ä S·ªê L∆Ø·ª¢NG ·∫¢NH:")
    print("-" * 50)
    for user in summary['users_with_images']:
        print(f"User ID: {user['user_id']:3d} | Username: {user['username']:15s} | "
              f"Full Name: {user['full_name']:20s} | ·∫¢nh: {user['image_count']:3d}")
    
    if summary['users_with_few_images']:
        print()
        print("‚ö†Ô∏è  USERS C√ì √çT H∆†N 5 ·∫¢NH (S·∫º B·ªä B·ªé QUA KHI TRAIN):")
        print("-" * 50)
        for user in summary['users_with_few_images']:
            print(f"User ID: {user['user_id']:3d} | Username: {user['username']:15s} | "
                  f"Full Name: {user['full_name']:20s} | ·∫¢nh: {user['image_count']:3d}")

def validate_training_data():
    """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu training."""
    import sqlite3
    
    def get_db_connection():
        conn = sqlite3.connect('database.db')
        conn.row_factory = sqlite3.Row
        return conn
    
    conn = get_db_connection()
    cur = conn.cursor()
    
    issues = []
    warnings = []
    
    # Ki·ªÉm tra users kh√¥ng c√≥ full_name
    cur.execute("SELECT user_id, username FROM users WHERE full_name IS NULL OR full_name = ''")
    users_without_name = cur.fetchall()
    if users_without_name:
        issues.append(f"C√≥ {len(users_without_name)} users kh√¥ng c√≥ full_name")
    
    # Ki·ªÉm tra ·∫£nh kh√¥ng t·ªìn t·∫°i
    cur.execute("SELECT user_id, image_path FROM face_profiles")
    face_profiles = cur.fetchall()
    missing_images = []
    for profile in face_profiles:
        if not os.path.exists(profile['image_path']):
            missing_images.append(profile['image_path'])
    
    if missing_images:
        issues.append(f"C√≥ {len(missing_images)} ·∫£nh kh√¥ng t·ªìn t·∫°i tr√™n disk")
    
    # Ki·ªÉm tra duplicate image paths
    cur.execute("SELECT image_path, COUNT(*) as count FROM face_profiles GROUP BY image_path HAVING count > 1")
    duplicates = cur.fetchall()
    if duplicates:
        issues.append(f"C√≥ {len(duplicates)} ·∫£nh b·ªã duplicate trong database")
    
    conn.close()
    
    return {
        'is_valid': len(issues) == 0,
        'issues': issues,
        'warnings': warnings,
        'missing_images': missing_images,
        'duplicate_images': [d['image_path'] for d in duplicates] if duplicates else []
    }

def print_validation_result():
    """In ra k·∫øt qu·∫£ validation d·ªØ li·ªáu."""
    result = validate_training_data()
    
    print("=" * 60)
    print("KI·ªÇM TRA T√çNH H·ª¢P L·ªÜ C·ª¶A D·ªÆ LI·ªÜU TRAINING")
    print("=" * 60)
    
    if result['is_valid']:
        print("‚úÖ D·ªØ li·ªáu h·ª£p l·ªá!")
    else:
        print("‚ùå D·ªØ li·ªáu c√≥ v·∫•n ƒë·ªÅ:")
        for issue in result['issues']:
            print(f"  - {issue}")
    
    if result['warnings']:
        print("\n‚ö†Ô∏è  C·∫£nh b√°o:")
        for warning in result['warnings']:
            print(f"  - {warning}")
    
    if result['missing_images']:
        print(f"\nüìÅ ·∫¢nh kh√¥ng t·ªìn t·∫°i ({len(result['missing_images'])}):")
        for img in result['missing_images'][:5]:  # Ch·ªâ hi·ªÉn th·ªã 5 ·∫£nh ƒë·∫ßu
            print(f"  - {img}")
        if len(result['missing_images']) > 5:
            print(f"  ... v√† {len(result['missing_images']) - 5} ·∫£nh kh√°c")
    
    if result['duplicate_images']:
        print(f"\nüîÑ ·∫¢nh b·ªã duplicate ({len(result['duplicate_images'])}):")
        for img in result['duplicate_images'][:5]:
            print(f"  - {img}")
        if len(result['duplicate_images']) > 5:
            print(f"  ... v√† {len(result['duplicate_images']) - 5} ·∫£nh kh√°c")

def print_user_mapping():
    """In ra mapping user_id -> full_name."""
    mapping = get_user_id_to_fullname_mapping()
    
    print("=" * 60)
    print("MAPPING USER_ID -> FULL_NAME")
    print("=" * 60)
    
    for user_id, full_name in mapping.items():
        print(f"User ID: {user_id:3s} -> {full_name}")

def export_training_data_info():
    """Export th√¥ng tin d·ªØ li·ªáu training ra file JSON ƒë·ªÉ ki·ªÉm tra."""
    import sqlite3
    
    def get_db_connection():
        conn = sqlite3.connect('database.db')
        conn.row_factory = sqlite3.Row
        return conn
    
    conn = get_db_connection()
    cur = conn.cursor()
    
    # L·∫•y t·∫•t c·∫£ th√¥ng tin users v√† ·∫£nh
    cur.execute("""
        SELECT u.user_id, u.username, u.full_name, fp.image_path
        FROM users u
        LEFT JOIN face_profiles fp ON u.user_id = fp.user_id
        ORDER BY u.user_id, fp.profile_id
    """)
    data = cur.fetchall()
    
    # T·ªï ch·ª©c d·ªØ li·ªáu theo user
    training_data = {}
    for row in data:
        user_id = str(row['user_id'])
        if user_id not in training_data:
            training_data[user_id] = {
                'user_id': row['user_id'],
                'username': row['username'],
                'full_name': row['full_name'],
                'images': []
            }
        if row['image_path']:
            training_data[user_id]['images'].append(row['image_path'])
    
    # L·ªçc b·ªè users kh√¥ng c√≥ ·∫£nh
    training_data = {k: v for k, v in training_data.items() if v['images']}
    
    # Th√™m th√¥ng tin t·ªïng quan
    summary = {
        'total_users_with_images': len(training_data),
        'total_images': sum(len(v['images']) for v in training_data.values()),
        'users_with_few_images': [k for k, v in training_data.items() if len(v['images']) < 5],
        'training_data': training_data
    }
    
    # L∆∞u ra file
    with open('training_data_info.json', 'w', encoding='utf-8') as f:
        json.dump(summary, f, ensure_ascii=False, indent=2)
    
    conn.close()
    print(f"ƒê√£ export th√¥ng tin training data ra file: training_data_info.json")
    return summary

def check_database_status():
    """Ki·ªÉm tra tr·∫°ng th√°i database v√† ƒë·ªìng b·ªô n·∫øu c·∫ßn."""
    print("üîç KI·ªÇM TRA TR·∫†NG TH√ÅI DATABASE")
    print("=" * 50)
    
    # Ki·ªÉm tra file CSV
    csv_users = {}
    if os.path.exists('users_export.csv'):
        import csv
        with open('users_export.csv', 'r', encoding='utf-8') as f:
            reader = csv.reader(f, delimiter='|')
            for row in reader:
                if len(row) >= 3:
                    user_id, username, full_name = row[:3]
                    csv_users[username] = {
                        'user_id': int(user_id),
                        'username': username,
                        'full_name': full_name
                    }
    
    print(f"CSV users: {len(csv_users)}")
    
    # Ki·ªÉm tra database
    import sqlite3
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM users")
    db_user_count = cur.fetchone()[0]
    cur.execute("SELECT COUNT(*) FROM face_profiles")
    db_image_count = cur.fetchone()[0]
    conn.close()
    
    print(f"Database users: {db_user_count}")
    print(f"Database images: {db_image_count}")
    
    # Ki·ªÉm tra th∆∞ m·ª•c ·∫£nh
    image_folders = []
    if os.path.exists('images_attendance'):
        for folder in os.listdir('images_attendance'):
            if folder.startswith('user_'):
                user_id = folder.split('_')[1]
                folder_path = os.path.join('images_attendance', folder)
                image_count = len([f for f in os.listdir(folder_path) 
                                 if f.lower().endswith(('.jpg', '.jpeg', '.png'))])
                image_folders.append((user_id, image_count))
    
    print(f"Th∆∞ m·ª•c ·∫£nh: {len(image_folders)} folders")
    
    # ƒê·ªÅ xu·∫•t h√†nh ƒë·ªông
    if db_user_count == 0 and len(csv_users) > 0:
        print("\n‚ö†Ô∏è  Database tr·ªëng nh∆∞ng c√≥ d·ªØ li·ªáu CSV. Ch·∫°y sync_users_from_csv()")
    elif db_user_count != len(csv_users):
        print(f"\n‚ö†Ô∏è  S·ªë l∆∞·ª£ng users kh√¥ng kh·ªõp: CSV={len(csv_users)}, DB={db_user_count}")
    else:
        print("\n‚úÖ Database v√† CSV ƒë·ªìng b·ªô")

def detect_mapping_errors():
    """Ph√°t hi·ªán l·ªói mapping trong database."""
    print("\nüîç PH√ÅT HI·ªÜN L·ªñI MAPPING")
    print("=" * 50)
    
    import sqlite3
    
    def get_db_connection():
        conn = sqlite3.connect('database.db')
        conn.row_factory = sqlite3.Row
        return conn
    
    conn = get_db_connection()
    cur = conn.cursor()
    
    errors = []
    warnings = []
    
    # 1. Ki·ªÉm tra users kh√¥ng c√≥ full_name
    cur.execute("SELECT user_id, username FROM users WHERE full_name IS NULL OR full_name = ''")
    users_without_name = cur.fetchall()
    if users_without_name:
        errors.append({
            'type': 'missing_full_name',
            'count': len(users_without_name),
            'users': [{'user_id': u['user_id'], 'username': u['username']} for u in users_without_name]
        })
    
    # 2. Ki·ªÉm tra users c√≥ full_name tr√πng nhau
    cur.execute("SELECT full_name, COUNT(*) as count FROM users WHERE full_name IS NOT NULL GROUP BY full_name HAVING count > 1")
    duplicate_names = cur.fetchall()
    if duplicate_names:
        errors.append({
            'type': 'duplicate_full_name',
            'count': len(duplicate_names),
            'names': [{'name': d['full_name'], 'count': d['count']} for d in duplicate_names]
        })
    
    # 3. Ki·ªÉm tra mapping user_id -> full_name c√≥ h·ª£p l√Ω kh√¥ng
    cur.execute("""
        SELECT u.user_id, u.username, u.full_name, COUNT(fp.profile_id) as image_count
        FROM users u
        LEFT JOIN face_profiles fp ON u.user_id = fp.user_id
        GROUP BY u.user_id
        ORDER BY u.user_id
    """)
    users_with_images = cur.fetchall()
    
    suspicious_mappings = []
    for user in users_with_images:
        user_id = user['user_id']
        username = user['username']
        full_name = user['full_name']
        image_count = user['image_count']
        
        # Ki·ªÉm tra username v√† full_name c√≥ li√™n quan kh√¥ng
        if full_name and username:
            username_clean = username.lower().replace('_', ' ').replace('-', ' ')
            full_name_clean = full_name.lower().replace('_', ' ').replace('-', ' ')
            
            # B·ªè qua tr∆∞·ªùng h·ª£p username v√† full_name gi·ªëng nhau
            if username_clean == full_name_clean:
                continue
                
            # B·ªè qua tr∆∞·ªùng h·ª£p username l√† m·ªôt ph·∫ßn c·ªßa full_name
            if username_clean in full_name_clean or full_name_clean in username_clean:
                continue
            
            # Ch·ªâ b√°o l·ªói khi th·ª±c s·ª± nghi ng·ªù
            if len(full_name_clean) > 5 and len(username_clean) > 3:
                suspicious_mappings.append({
                    'user_id': user_id,
                    'username': username,
                    'full_name': full_name,
                    'image_count': image_count,
                    'reason': 'Username v√† full_name c√≥ th·ªÉ kh√¥ng li√™n quan'
                })
    
    if suspicious_mappings:
        warnings.append({
            'type': 'suspicious_mapping',
            'count': len(suspicious_mappings),
            'mappings': suspicious_mappings
        })
    
    # 4. Ki·ªÉm tra file user_id_to_fullname.json n·∫øu c√≥
    if os.path.exists('user_id_to_fullname.json'):
        with open('user_id_to_fullname.json', 'r', encoding='utf-8') as f:
            training_mapping = json.load(f)
        
        # So s√°nh v·ªõi database
        db_mapping = {}
        for user in users_with_images:
            if user['full_name']:
                db_mapping[str(user['user_id'])] = user['full_name']
        
        # T√¨m mapping kh√¥ng kh·ªõp
        mismatches = []
        for user_id in set(db_mapping.keys()) | set(training_mapping.keys()):
            db_name = db_mapping.get(user_id)
            training_name = training_mapping.get(user_id)
            
            if db_name != training_name:
                mismatches.append({
                    'user_id': user_id,
                    'db_name': db_name,
                    'training_name': training_name
                })
        
        if mismatches:
            errors.append({
                'type': 'mapping_mismatch',
                'count': len(mismatches),
                'mismatches': mismatches
            })
    
    conn.close()
    
    return {
        'errors': errors,
        'warnings': warnings,
        'total_users': len(users_with_images),
        'users_with_images': len([u for u in users_with_images if u['image_count'] > 0])
    }

def print_mapping_errors(results):
    """In k·∫øt qu·∫£ ph√°t hi·ªán l·ªói mapping."""
    if results['errors']:
        print(f"\n‚ùå L·ªñI MAPPING PH√ÅT HI·ªÜN:")
        for error in results['errors']:
            if error['type'] == 'missing_full_name':
                print(f"  - {error['count']} users kh√¥ng c√≥ full_name")
            elif error['type'] == 'duplicate_full_name':
                print(f"  - {error['count']} t√™n b·ªã tr√πng")
            elif error['type'] == 'mapping_mismatch':
                print(f"  - {error['count']} mapping kh√¥ng kh·ªõp gi·ªØa DB v√† file training")
    
    if results['warnings']:
        print(f"\n‚ö†Ô∏è  C·∫¢NH B√ÅO MAPPING:")
        for warning in results['warnings']:
            if warning['type'] == 'suspicious_mapping':
                print(f"  - {warning['count']} mapping c√≥ th·ªÉ sai")

def export_error_report(results):
    """Export b√°o c√°o l·ªói ra file ch·ªâ khi c√≥ l·ªói."""
    if not results['errors'] and not results['warnings']:
        print("\n‚úÖ Kh√¥ng c√≥ l·ªói mapping n√†o c·∫ßn b√°o c√°o")
        return
    
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f'mapping_error_report_{timestamp}.json'
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ ƒê√£ export b√°o c√°o l·ªói ra file: {filename}")

def main():
    print("üîç KI·ªÇM TRA D·ªÆ LI·ªÜU TRAINING")
    print("=" * 60)
    
    # 1. Ki·ªÉm tra tr·∫°ng th√°i database
    check_database_status()
    print()
    
    # 2. In t·ªïng quan d·ªØ li·ªáu
    print_training_data_summary()
    print()
    
    # 3. Ki·ªÉm tra validation
    print_validation_result()
    print()
    
    # 4. In mapping user_id -> full_name
    print_user_mapping()
    print()
    
    # 5. Ph√°t hi·ªán l·ªói mapping
    mapping_results = detect_mapping_errors()
    print_mapping_errors(mapping_results)
    
    # 6. Export th√¥ng tin chi ti·∫øt
    print("\nüìä Export th√¥ng tin chi ti·∫øt...")
    summary = export_training_data_info()
    
    # 7. Export b√°o c√°o l·ªói mapping (ch·ªâ khi c√≥ l·ªói)
    export_error_report(mapping_results)
    
    # 8. T√≥m t·∫Øt
    print("\n" + "=" * 60)
    print("T√ìM T·∫ÆT")
    print("=" * 60)
    
    validation = validate_training_data()
    mapping = get_user_id_to_fullname_mapping()
    
    print(f"‚úÖ Users c√≥ ·∫£nh: {summary['total_users_with_images']}")
    print(f"üì∏ T·ªïng s·ªë ·∫£nh: {summary['total_images']}")
    print(f"‚ö†Ô∏è  Users c√≥ √≠t h∆°n 5 ·∫£nh: {len(summary['users_with_few_images'])}")
    print(f"üîç V·∫•n ƒë·ªÅ ph√°t hi·ªán: {len(validation['issues'])}")
    print(f"‚ö†Ô∏è  C·∫£nh b√°o: {len(validation['warnings'])}")
    print(f"üîç L·ªói mapping: {len(mapping_results['errors'])}")
    print(f"‚ö†Ô∏è  C·∫£nh b√°o mapping: {len(mapping_results['warnings'])}")
    
    if validation['is_valid'] and len(mapping_results['errors']) == 0:
        print("\nüéâ D·ªØ li·ªáu s·∫µn s√†ng ƒë·ªÉ train!")
        print("B·∫°n c√≥ th·ªÉ ch·∫°y: python finish_train.py")
    else:
        print("\n‚ùå C·∫ßn s·ª≠a l·ªói tr∆∞·ªõc khi train!")
        print("Vui l√≤ng ch·∫°y: python fix_database.py ƒë·ªÉ s·ª≠a l·ªói")
        print("Sau ƒë√≥ ch·∫°y l·∫°i: python check_training_data.py")

if __name__ == "__main__":
    main() 