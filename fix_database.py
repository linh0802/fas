#!/usr/bin/env python3
"""
Script s·ª≠a d·ªØ li·ªáu database b·ªã sai.
Ch·ª©c nƒÉng:
- S·ª≠a mapping user_id v√† full_name
- X√≥a ·∫£nh kh√¥ng t·ªìn t·∫°i
- X√≥a ·∫£nh duplicate
- Ki·ªÉm tra t√≠nh to√†n v·∫πn d·ªØ li·ªáu
"""

import os
import sqlite3
import json
from db import get_user_id_to_fullname_mapping

def get_db_connection():
    """K·∫øt n·ªëi database."""
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

def show_database_status():
    """Hi·ªÉn th·ªã tr·∫°ng th√°i database hi·ªán t·∫°i."""
    print("üîç TR·∫†NG TH√ÅI DATABASE HI·ªÜN T·∫†I")
    print("=" * 50)
    
    conn = get_db_connection()
    cur = conn.cursor()
    
    # Th·ªëng k√™ users
    cur.execute("SELECT COUNT(*) FROM users")
    total_users = cur.fetchone()[0]
    
    cur.execute("SELECT COUNT(*) FROM users WHERE full_name IS NULL OR full_name = ''")
    users_without_name = cur.fetchone()[0]
    
    # Th·ªëng k√™ ·∫£nh
    cur.execute("SELECT COUNT(*) FROM face_profiles")
    total_images = cur.fetchone()[0]
    
    # ·∫¢nh kh√¥ng t·ªìn t·∫°i
    cur.execute("SELECT image_path FROM face_profiles")
    missing_images = []
    for row in cur.fetchall():
        if not os.path.exists(row['image_path']):
            missing_images.append(row['image_path'])
    
    # ·∫¢nh duplicate
    cur.execute("SELECT image_path, COUNT(*) as count FROM face_profiles GROUP BY image_path HAVING count > 1")
    duplicates = cur.fetchall()
    
    conn.close()
    
    print(f"üë• T·ªïng users: {total_users}")
    print(f"‚ö†Ô∏è  Users kh√¥ng c√≥ t√™n: {users_without_name}")
    print(f"üì∏ T·ªïng ·∫£nh: {total_images}")
    print(f"‚ùå ·∫¢nh kh√¥ng t·ªìn t·∫°i: {len(missing_images)}")
    print(f"üîÑ ·∫¢nh duplicate: {len(duplicates)}")
    
    return {
        'total_users': total_users,
        'users_without_name': users_without_name,
        'total_images': total_images,
        'missing_images': missing_images,
        'duplicates': [d['image_path'] for d in duplicates]
    }

def fix_user_names():
    """S·ª≠a users kh√¥ng c√≥ full_name."""
    print("\nüîß S·ª¨A USERS KH√îNG C√ì T√äN")
    print("=" * 40)
    
    conn = get_db_connection()
    cur = conn.cursor()
    
    # L·∫•y users kh√¥ng c√≥ full_name
    cur.execute("SELECT user_id, username FROM users WHERE full_name IS NULL OR full_name = ''")
    users_without_name = cur.fetchall()
    
    if not users_without_name:
        print("‚úÖ Kh√¥ng c√≥ users n√†o thi·∫øu t√™n")
        conn.close()
        return
    
    print(f"T√¨m th·∫•y {len(users_without_name)} users kh√¥ng c√≥ t√™n:")
    for user in users_without_name:
        print(f"  User ID {user['user_id']}: {user['username']}")
    
    print("\nNh·∫≠p t√™n cho t·ª´ng user (ho·∫∑c Enter ƒë·ªÉ b·ªè qua):")
    
    fixed_count = 0
    for user in users_without_name:
        user_id = user['user_id']
        username = user['username']
        
        # G·ª£i √Ω t√™n t·ª´ username
        suggested_name = username.replace('_', ' ').title()
        
        full_name = input(f"User {user_id} ({username}): [{suggested_name}] ").strip()
        if not full_name:
            full_name = suggested_name
        
        if full_name:
            cur.execute("UPDATE users SET full_name = ? WHERE user_id = ?", (full_name, user_id))
            fixed_count += 1
            print(f"  ‚úÖ ƒê√£ c·∫≠p nh·∫≠t: {full_name}")
    
    conn.commit()
    conn.close()
    
    print(f"\n‚úÖ ƒê√£ s·ª≠a {fixed_count} users")

def fix_missing_images():
    """X√≥a ·∫£nh kh√¥ng t·ªìn t·∫°i kh·ªèi database."""
    print("\nüóëÔ∏è  X√ìA ·∫¢NH KH√îNG T·ªíN T·∫†I")
    print("=" * 40)
    
    conn = get_db_connection()
    cur = conn.cursor()
    
    # L·∫•y ·∫£nh kh√¥ng t·ªìn t·∫°i
    cur.execute("SELECT profile_id, image_path FROM face_profiles")
    missing_records = []
    for row in cur.fetchall():
        if not os.path.exists(row['image_path']):
            missing_records.append(row)
    
    if not missing_records:
        print("‚úÖ Kh√¥ng c√≥ ·∫£nh n√†o kh√¥ng t·ªìn t·∫°i")
        conn.close()
        return
    
    print(f"T√¨m th·∫•y {len(missing_records)} ·∫£nh kh√¥ng t·ªìn t·∫°i:")
    for record in missing_records[:5]:  # Ch·ªâ hi·ªÉn th·ªã 5 ·∫£nh ƒë·∫ßu
        print(f"  - {record['image_path']}")
    
    if len(missing_records) > 5:
        print(f"  ... v√† {len(missing_records) - 5} ·∫£nh kh√°c")
    
    confirm = input("\nB·∫°n c√≥ mu·ªën x√≥a c√°c ·∫£nh n√†y kh·ªèi database? (y/N): ").strip().lower()
    
    if confirm == 'y':
        deleted_count = 0
        for record in missing_records:
            cur.execute("DELETE FROM face_profiles WHERE profile_id = ?", (record['profile_id'],))
            deleted_count += 1
        
        conn.commit()
        print(f"‚úÖ ƒê√£ x√≥a {deleted_count} ·∫£nh kh√¥ng t·ªìn t·∫°i")
    else:
        print("‚ùå ƒê√£ h·ªßy")
    
    conn.close()

def fix_duplicate_images():
    """X√≥a ·∫£nh duplicate kh·ªèi database."""
    print("\nüîÑ X√ìA ·∫¢NH DUPLICATE")
    print("=" * 40)
    
    conn = get_db_connection()
    cur = conn.cursor()
    
    # L·∫•y ·∫£nh duplicate
    cur.execute("""
        SELECT image_path, COUNT(*) as count, GROUP_CONCAT(profile_id) as profile_ids
        FROM face_profiles 
        GROUP BY image_path 
        HAVING count > 1
    """)
    duplicates = cur.fetchall()
    
    if not duplicates:
        print("‚úÖ Kh√¥ng c√≥ ·∫£nh duplicate")
        conn.close()
        return
    
    print(f"T√¨m th·∫•y {len(duplicates)} ·∫£nh duplicate:")
    for dup in duplicates[:5]:
        print(f"  - {dup['image_path']} ({dup['count']} l·∫ßn)")
    
    if len(duplicates) > 5:
        print(f"  ... v√† {len(duplicates) - 5} ·∫£nh kh√°c")
    
    confirm = input("\nB·∫°n c√≥ mu·ªën x√≥a c√°c ·∫£nh duplicate? (y/N): ").strip().lower()
    
    if confirm == 'y':
        deleted_count = 0
        for dup in duplicates:
            profile_ids = dup['profile_ids'].split(',')
            # Gi·ªØ l·∫°i record ƒë·∫ßu ti√™n, x√≥a c√°c record c√≤n l·∫°i
            for profile_id in profile_ids[1:]:
                cur.execute("DELETE FROM face_profiles WHERE profile_id = ?", (profile_id,))
                deleted_count += 1
        
        conn.commit()
        print(f"‚úÖ ƒê√£ x√≥a {deleted_count} ·∫£nh duplicate")
    else:
        print("‚ùå ƒê√£ h·ªßy")
    
    conn.close()

def fix_user_mapping():
    """S·ª≠a mapping user_id v√† full_name."""
    print("\nüîß S·ª¨A MAPPING USER_ID V√Ä FULL_NAME")
    print("=" * 50)
    
    conn = get_db_connection()
    cur = conn.cursor()
    
    # L·∫•y t·∫•t c·∫£ users
    cur.execute("SELECT user_id, username, full_name FROM users ORDER BY user_id")
    users = cur.fetchall()
    
    print("üìã DANH S√ÅCH USERS HI·ªÜN T·∫†I:")
    print("-" * 60)
    print(f"{'User ID':<8} | {'Username':<15} | {'Full Name':<25}")
    print("-" * 60)
    
    for user in users:
        user_id = user['user_id']
        username = user['username']
        full_name = user['full_name'] or "N/A"
        print(f"{user_id:<8} | {username:<15} | {full_name:<25}")
    
    print("\nCh·ªçn h√†nh ƒë·ªông:")
    print("1. S·ª≠a t√™n m·ªôt user c·ª• th·ªÉ")
    print("2. S·ª≠a t√™n t·∫•t c·∫£ users")
    print("3. Quay l·∫°i")
    
    choice = input("Nh·∫≠p l·ª±a ch·ªçn (1-3): ").strip()
    
    if choice == '1':
        user_id = input("Nh·∫≠p User ID c·∫ßn s·ª≠a: ").strip()
        try:
            user_id = int(user_id)
            cur.execute("SELECT username, full_name FROM users WHERE user_id = ?", (user_id,))
            user = cur.fetchone()
            
            if user:
                print(f"User hi·ªán t·∫°i: {user['username']} - {user['full_name']}")
                new_name = input("Nh·∫≠p t√™n m·ªõi: ").strip()
                if new_name:
                    cur.execute("UPDATE users SET full_name = ? WHERE user_id = ?", (new_name, user_id))
                    conn.commit()
                    print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t user {user_id}: {new_name}")
                else:
                    print("‚ùå T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            else:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi ID {user_id}")
        except ValueError:
            print("‚ùå User ID ph·∫£i l√† s·ªë")
    
    elif choice == '2':
        print("\nNh·∫≠p t√™n m·ªõi cho t·ª´ng user (Enter ƒë·ªÉ gi·ªØ nguy√™n):")
        for user in users:
            user_id = user['user_id']
            username = user['username']
            current_name = user['full_name'] or username
            
            new_name = input(f"User {user_id} ({username}): [{current_name}] ").strip()
            if new_name:
                cur.execute("UPDATE users SET full_name = ? WHERE user_id = ?", (new_name, user_id))
                print(f"  ‚úÖ ƒê√£ c·∫≠p nh·∫≠t: {new_name}")
        
        conn.commit()
        print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t t·∫•t c·∫£ users")
    
    conn.close()

def validate_training_data():
    """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu training."""
    conn = get_db_connection()
    cur = conn.cursor()
    
    issues = []
    warnings = []
    
    # Ki·ªÉm tra users kh√¥ng c√≥ full_name
    cur.execute("SELECT user_id, username FROM users WHERE full_name IS NULL OR full_name = ''")
    users_without_name = cur.fetchall()
    if users_without_name:
        issues.append(f"C√≥ {len(users_without_name)} users kh√¥ng c√≥ full_name")
    
    # Ki·ªÉm tra ·∫£nh kh√¥ng t·ªìn t·∫°i
    cur.execute("SELECT user_id, image_path FROM face_profiles")
    face_profiles = cur.fetchall()
    missing_images = []
    for profile in face_profiles:
        if not os.path.exists(profile['image_path']):
            missing_images.append(profile['image_path'])
    
    if missing_images:
        issues.append(f"C√≥ {len(missing_images)} ·∫£nh kh√¥ng t·ªìn t·∫°i tr√™n disk")
    
    # Ki·ªÉm tra duplicate image paths
    cur.execute("SELECT image_path, COUNT(*) as count FROM face_profiles GROUP BY image_path HAVING count > 1")
    duplicates = cur.fetchall()
    if duplicates:
        issues.append(f"C√≥ {len(duplicates)} ·∫£nh b·ªã duplicate trong database")
    
    conn.close()
    
    return {
        'is_valid': len(issues) == 0,
        'issues': issues,
        'warnings': warnings,
        'missing_images': missing_images,
        'duplicate_images': [d['image_path'] for d in duplicates] if duplicates else []
    }

def export_fixed_data():
    """Export d·ªØ li·ªáu ƒë√£ s·ª≠a."""
    print("\nüìä EXPORT D·ªÆ LI·ªÜU ƒê√É S·ª¨A")
    print("=" * 40)
    
    conn = get_db_connection()
    cur = conn.cursor()
    
    # L·∫•y d·ªØ li·ªáu ƒë√£ s·ª≠a
    cur.execute("""
        SELECT u.user_id, u.username, u.full_name, COUNT(fp.profile_id) as image_count
        FROM users u
        LEFT JOIN face_profiles fp ON u.user_id = fp.user_id
        GROUP BY u.user_id
        ORDER BY u.user_id
    """)
    
    data = []
    for row in cur.fetchall():
        data.append({
            'user_id': row['user_id'],
            'username': row['username'],
            'full_name': row['full_name'],
            'image_count': row['image_count']
        })
    
    conn.close()
    
    # L∆∞u ra file
    with open('fixed_database_export.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ ƒê√£ export {len(data)} users ra file: fixed_database_export.json")
    
    # T·∫°o mapping cho training
    mapping = {}
    for user in data:
        if user['image_count'] > 0:
            mapping[str(user['user_id'])] = user['full_name']
    
    with open('user_id_to_fullname_fixed.json', 'w', encoding='utf-8') as f:
        json.dump(mapping, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ ƒê√£ t·∫°o mapping cho {len(mapping)} users c√≥ ·∫£nh: user_id_to_fullname_fixed.json")

def main():
    """Menu ch√≠nh."""
    print("üîß C√îNG C·ª§ S·ª¨A D·ªÆ LI·ªÜU DATABASE")
    print("=" * 60)
    
    while True:
        print("\nüìã MENU:")
        print("1. Xem tr·∫°ng th√°i database")
        print("2. S·ª≠a users kh√¥ng c√≥ t√™n")
        print("3. X√≥a ·∫£nh kh√¥ng t·ªìn t·∫°i")
        print("4. X√≥a ·∫£nh duplicate")
        print("5. S·ª≠a mapping user_id v√† full_name")
        print("6. Export d·ªØ li·ªáu ƒë√£ s·ª≠a")
        print("7. Ki·ªÉm tra t√≠nh h·ª£p l·ªá")
        print("8. Tho√°t")
        
        choice = input("\nNh·∫≠p l·ª±a ch·ªçn (1-8): ").strip()
        
        if choice == '1':
            show_database_status()
        
        elif choice == '2':
            fix_user_names()
        
        elif choice == '3':
            fix_missing_images()
        
        elif choice == '4':
            fix_duplicate_images()
        
        elif choice == '5':
            fix_user_mapping()
        
        elif choice == '6':
            export_fixed_data()
        
        elif choice == '7':
            print("\nüîç KI·ªÇM TRA T√çNH H·ª¢P L·ªÜ")
            print("=" * 40)
            validation = validate_training_data()
            
            if validation['is_valid']:
                print("‚úÖ D·ªØ li·ªáu h·ª£p l·ªá!")
            else:
                print("‚ùå D·ªØ li·ªáu c√≥ v·∫•n ƒë·ªÅ:")
                for issue in validation['issues']:
                    print(f"  - {issue}")
            
            if validation['warnings']:
                print("\n‚ö†Ô∏è  C·∫£nh b√°o:")
                for warning in validation['warnings']:
                    print(f"  - {warning}")
        
        elif choice == '8':
            print("üëã T·∫°m bi·ªát!")
            break
        
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")

if __name__ == "__main__":
    main() 